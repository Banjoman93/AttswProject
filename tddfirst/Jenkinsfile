pipeline {
    agent any
    tools { 
        maven 'Maven 3.6.2' 
        jdk 'JDK12'
    }


    stages {
         stage ('JDK_version') {
            steps {
                bat 'java -version'
            }
         }
        
        
        stage('Clone repository') {
            steps { 
        		echo 'checkout repository...'
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'sshcredentials', url: 'git@github.com:Banjoman93/AttswProject.git']]])
            	echo 'finished checkout repository...'
            	bat "dir"
        	}
        }
        
        stage('Build with Maven') { 
  		  	steps {
      		  	dir('tddfirst') {
           			echo 'Building...'
           			bat 'mvn -B --no-transfer-progress clean install'
            		echo 'Build completed'
       			}
  			}
		}
        
        stage('Run test with maven') {
            steps { 
                dir('tddfirst'){
            		echo 'running tests...'
                    bat 'mvn -B --no-transfer-progress test'
                    echo 'finished mvn tests'
                }
            }
        }
        
        
        // Step che mi permette di Deployare 
        stage('Build jar with maven') {
            steps { 
                dir('tddfirst'){
                	echo 'initialize build jar...'
                    bat 'mvn -B --no-transfer-progress clean package'
                    echo 'finished mvn buil package.'
                	bat "dir"
                }
            }
        }
        
        
        stage('SonarCloud Analysis') {
            steps {
                dir('tddfirst'){
                        bat "mvn sonar:sonar -Dsonar.projectKey=tddfirst_def -Dsonar.host.url=http://localhost:9000 -Dsonar.login=21bfd354d7de364f652e16e5eabc306449d32b4c"
                }
            }
        }
        
        stage('Build docker image') {
            steps {
                bat 'docker --version'
                dir('tddfirst'){
            	    echo 'build docker image...'
                    script {
                        textcategorizerImg = docker.build("myimage")
                    }
            	    echo 'finish build docker image...'
                }
            }
        }
      } 
    
}